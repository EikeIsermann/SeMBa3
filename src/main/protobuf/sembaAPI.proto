syntax = "proto3";
package sembaGRPC;
option java_package = "sembaGRPC";
import "types.proto";


service SembaAPI {

    rpc OpenLibrary (LibraryRequest) returns (LibraryConcepts) {
    }
    rpc RequestContents (Library) returns (LibraryContent) {
    }

    rpc RequestCollectionContent(Resource) returns (CollectionContent){

    }
    rpc CloseLibrary (LibraryRequest) returns (VoidResult) {
    }

    rpc addToLibrary (SourceFile) returns (VoidResult) {
    }
    rpc removeFromLibrary (Resource) returns (VoidResult) {
    }

    rpc addToCollection (AddToCollection) returns (VoidResult) {
    }
    rpc removeFromCollection (CollectionItem) returns (VoidResult) {
    }
    rpc createRelation (RelationModification) returns (VoidResult) {
    }
    rpc removeRelation (RelationModification) returns (VoidResult) {
    }

    rpc getMetadata (Resource) returns (ItemDescription) {
    }
    rpc updateMetadata (MetadataUpdate) returns (VoidResult) {
    }

    rpc writeBenchmarkResults(Library) returns (VoidResult){

    }

    rpc simpleSearch (SimpleQuery) returns (LibraryContent) {
    }
    rpc sparqlFilter (SparqlQuery) returns (FilterResult) {
    }

    rpc subscribeUpdates (UpdateRequest) returns (stream UpdateMessage) {
    }
    rpc registerSession (SessionRequest) returns (SessionRequest) {
    }

    rpc closeConnection(SessionRequest) returns (SessionRequest){

    }
    

    rpc ping (TestMsg) returns (TestMsg) {
    }
    //rpc unsubscribeUpdates(UpdateRequest) returns (){}
}
message TestMsg {
    string test = 1;
}

message AddToCollection {
    Resource collection = 1;
    Resource newItem = 2;
}


message VoidResult {
    bool accepted = 1;
    string message = 2;
    string id = 3;
}

message SourceFile {
    Library library = 1;
    oneof source {
        string path = 2;
        bytes data = 3;
        NewCollection coll = 4;
    }
    string ontClass = 5;
}

message NewCollection {
    string name = 1;
   // string ontClass = 2;
    string picture = 3;
}

message RelationModification {
    Library library = 1;
    CollectionItem start = 2;
    CollectionItem end = 3;
    Relation rel = 4;
}

message MetadataUpdate {
    Resource item = 1;
    ItemDescription delete = 2;
    ItemDescription add = 3;
}

message SimpleQuery {
    Library library = 1;
    string key = 2;
    bool searchAll = 3;
}

message SparqlQuery {
    Library library = 1;
    string queryString = 2;
    repeated string vars = 3;
}

enum UpdateType {
    DELETE = 0;
    ADD = 1;
    NOTIFY = 2;
    REPLACE = 3;
}

message FilterResult {
    repeated ResultEntry results = 1;
}

message ResultEntry {
    map<string, string> results = 1;
}

message UpdateMessage {
    UpdateType kindOfUpdate = 1;
    repeated  Resource items = 2;
    repeated  CollectionItem collectionItems = 4;
    repeated  ItemDescription descriptions = 5;
    repeated  RelationModification collectionRelations = 6;
    repeated  Notification notes = 7;
    string lib = 8;
    repeated  RelationModification generalRelations = 9;
    repeated  RelationModification descriptiveRelations = 10;
    repeated AnnotationUpdate annotations = 11;
    string jobID = 12;

}

message AnnotationUpdate {
    map<string,Annotation> map = 1;
}

message Notification{
    string msg = 1;
    string uri = 2;
}

message UpdateRequest {
    string sessionID = 1;
}

message SessionRequest {
    string sessionID = 1;
}

message LibraryRequest {
    Library lib = 1;
    string sessionID = 2;
}